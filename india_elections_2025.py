# -*- coding: utf-8 -*-
"""India Elections 2025

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tYdWmPoA1ghPLy097Q2MFS8sSr6zml8g
"""

# Full analysis with additional insights
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import classification_report
from sklearn.cluster import KMeans

# Upload your file manually via Colab file upload
from google.colab import files
uploaded = files.upload()

# Load dataset
df = pd.read_csv('eci_data_2024.csv', encoding='ISO-8859-1')

# Clean numeric columns
numeric_columns = ['EVM Votes', 'Postal Votes', 'Total Votes', '% of Votes']
for col in numeric_columns:
    df[col] = df[col].replace('-', '0')
    df[col] = df[col].str.replace(',', '', regex=False).astype(float)

# Identify winners
df['Winner'] = df.groupby('Constituency')['Total Votes'].transform(lambda x: x == x.max()).astype(int)

# Top 10 candidates
top_10 = df.sort_values('Total Votes', ascending=False).head(10)

# Party wins
winners = df[df['Winner'] == 1]
party_wins = winners['Party'].value_counts()

# Vote share
vote_share = df.groupby('Party')['Total Votes'].sum()
vote_share_percentage = (vote_share / vote_share.sum()) * 100

# Closest contests
df['Rank'] = df.groupby('Constituency')['Total Votes'].rank(ascending=False)
first = df[df['Rank'] == 1]
second = df[df['Rank'] == 2]
margins = pd.merge(first, second, on='Constituency', suffixes=('_win', '_runnerup'))
margins['Margin'] = margins['Total Votes_win'] - margins['Total Votes_runnerup']
close_contests = margins[margins['Margin'] < 5000].sort_values('Margin')

# State-wise performance
state_party = winners.groupby(['State', 'Party']).size().unstack(fill_value=0)

# Machine Learning model
df['Party_enc'] = LabelEncoder().fit_transform(df['Party'])
df['Constituency_enc'] = LabelEncoder().fit_transform(df['Constituency'])

X = df[['EVM Votes', 'Postal Votes', '% of Votes', 'Party_enc', 'Constituency_enc']]
y = df['Winner']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train, y_train)
y_pred = model.predict(X_test)
ml_report = classification_report(y_test, y_pred)

# Clustering constituencies
features = df.groupby('Constituency')[['Total Votes', '% of Votes']].mean()
kmeans = KMeans(n_clusters=4, random_state=42).fit(features)
features['Cluster'] = kmeans.labels_

# Plot: Party wins
party_wins.plot(kind='bar', figsize=(10, 5), title='Number of Seats Won by Each Party')
plt.ylabel('Number of Seats')
plt.tight_layout()
plt.show()

# Plot: Vote share
vote_share_percentage.sort_values(ascending=False).head(10).plot(kind='pie', autopct='%1.1f%%', figsize=(8, 8))
plt.title('Vote Share (Top 10 Parties)')
plt.ylabel('')
plt.tight_layout()
plt.show()



# NOTA Insights
nota_data = df[df['Party'].str.upper() == 'NOTA']
nota_top = nota_data.sort_values('Total Votes', ascending=False).head(10)

# Party-wise Success Rate
success_rate = df.groupby('Party')['Winner'].mean().sort_values(ascending=False) * 100

# Gender-Based Analysis (only if column exists)
if 'Gender' in df.columns:
    gender_counts = df['Gender'].value_counts()
    gender_win_rate = df.groupby('Gender')['Winner'].mean() * 100
else:
    gender_counts = "No 'Gender' column in dataset"
    gender_win_rate = "N/A"



print("✅ Top 10 Candidates by Votes")
display(top_10[['Candidate', 'Party', 'Total Votes']])

print("\n✅ Party Wins")
display(party_wins)

print("\n✅ Vote Share % (Top Parties)")
display(vote_share_percentage.sort_values(ascending=False).head(10))

print("\n✅ Closest Contests (Margin < 5000 votes)")
display(close_contests[['Constituency', 'Candidate_win', 'Party_win', 'Margin']])

print("\n✅ Machine Learning Classification Report")
print(ml_report)

print("\n✅ Cluster Sample (first 5 constituencies)")
display(features.head())

print("\n✅ NOTA Top Votes")
display(nota_top[['Constituency', 'Candidate', 'Total Votes']])

print("\n✅ Party-wise Candidate Success Rate (%)")
display(success_rate)

print("\n✅ Gender-based Candidate Count")
print(gender_counts)

print("\n✅ Gender-based Win Rate (%)")
print(gender_win_rate)